import os
import pandas as pd
import xml.etree.ElementTree as ET

def get_default_export_path():
    """Return the default path to Apple Health export.xml."""
    return os.path.expanduser('~/Documents/Projects/apple_watch_project/data/raw/apple_health_export/export.xml')

def parse_xml(xml_file_path):
    """Parse the XML file and return the root element."""
    tree = ET.parse(xml_file_path)
    return tree.getroot()

def extract_steps_df(xml_root):
    """Extract step data from XML root and return as DataFrame."""
    records = xml_root.findall('Record')
    step_data = []
    for record in records:
        record_type = record.get('type')
        start_date = record.get('startDate')
        end_date = record.get('endDate')
        source_name = record.get('sourceName')
        source_version = record.get('sourceVersion')
        device = record.get('device')
        if record_type == 'HKQuantityTypeIdentifierStepCount':
            value = record.get('value')
            unit = record.get('unit')
            step_data.append({
                'start_date': start_date,
                'end_date': end_date,
                'steps': int(float(value)),
                'unit': unit,
                'source_name': source_name,
                'source_version': source_version,
                'device': device
            })
    return pd.DataFrame(step_data)

def extract_sleep_df(xml_root):
    """Extract sleep data from XML root and return as DataFrame."""
    sleep_data = []
    for record in xml_root.findall('Record'):
        if record.get('type') == 'HKCategoryTypeIdentifierSleepAnalysis':
            sleep_data.append({
                'start_date': record.get('startDate'),
                'end_date': record.get('endDate'),
                'sleep_state': record.get('value'),
                'source_name': record.get('sourceName'),
                'source_version': record.get('sourceVersion'),
                'device': record.get('device')
            })
    return pd.DataFrame(sleep_data)

# Legacy functions for backward compatibility
def get_steps_df(xml_file_path=None):
    if xml_file_path is None:
        xml_file_path = get_default_export_path()
    root = parse_xml(xml_file_path)
    return extract_steps_df(root)

def get_sleep_df(xml_file_path=None):
    if xml_file_path is None:
        xml_file_path = get_default_export_path()
    root = parse_xml(xml_file_path)
    return extract_sleep_df(root)

if __name__ == '__main__':
    xml_path = get_default_export_path()
    root = parse_xml(xml_path)
    steps_df = extract_steps_df(root)
    print('Raw Step Data:')
    print(steps_df.head())
    steps_df.info()

    sleep_df = extract_sleep_df(root)
    print('\nRaw Sleep Data:')
    print(sleep_df.head())
    sleep_df.info()

    import os

    # This gives the directory where the script file lives
    SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

    # Go up to project root (assuming scripts is a direct child of root)
    PROJECT_ROOT = os.path.abspath(os.path.join(SCRIPT_DIR, '..'))

    # Build data/extracted relative to project root
    extracted_dir = os.path.join(PROJECT_ROOT, 'data', 'extracted')
    os.makedirs(extracted_dir, exist_ok=True)

    steps_csv_path = os.path.join(extracted_dir, 'steps_raw.csv')
    sleep_csv_path = os.path.join(extracted_dir, 'sleep_raw.csv')

    steps_df.to_csv(steps_csv_path, index=False)
    sleep_df.to_csv(sleep_csv_path, index=False)
    print(f"\nExported steps to {steps_csv_path}")
    print(f"Exported sleep to {sleep_csv_path}")