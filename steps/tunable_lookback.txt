def tuned_model(hp):
    """
    Build LSTM model with hyperparameter tuning including tunable lookback.
    """
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Input, LSTM, Dense, Dropout

    model = Sequential()

    # Tune the lookback parameter
    lookback = hp.Int('lookback', min_value=6, max_value=52, step=5)

    model.add(Input(shape=(lookback, 1)))
    model.add(LSTM(hp.Int('input_unit', min_value=4, max_value=128, step=8), return_sequences=True))

    for i in range(hp.Int('n_layers', 1, 4)):
        model.add(LSTM(hp.Int(f'lstm_{i}_units', min_value=4, max_value=128, step=8), return_sequences=True))

    model.add(LSTM(hp.Int('layer_2_neurons', min_value=4, max_value=128, step=8)))
    model.add(Dropout(hp.Float('Dropout_rate', min_value=0, max_value=0.5, step=0.1)))

    # Output layer - we'll set this dynamically
    forecast = 32  # Set default, will be overridden
    model.add(Dense(forecast))

    model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mse'])

    return model
    
    # TunableLookbackHyperModel